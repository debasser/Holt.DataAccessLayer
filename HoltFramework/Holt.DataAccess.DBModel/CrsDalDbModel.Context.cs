//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Holt.DataAccess.DBModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CrsDalDb : DbContext
    {
        public CrsDalDb()
            : base("name=CrsDalDb")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ComponentImpl> ComponentImpls { get; set; }
        public virtual DbSet<CustomerImpl> CustomerImpls { get; set; }
        public virtual DbSet<JobImpl> JobImpls { get; set; }
        public virtual DbSet<GroupImpl> GroupImpls { get; set; }
        public virtual DbSet<NotificationImpl> NotificationImpls { get; set; }
        public virtual DbSet<UserImpl> UserImpls { get; set; }
        public virtual DbSet<UserStatusImpl> UserStatusImpls { get; set; }
    
        public virtual ObjectResult<UserImpl> GetUsersByGroup(Nullable<int> groupId)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserImpl>("GetUsersByGroup", groupIdParameter);
        }
    
        public virtual ObjectResult<UserImpl> GetUsersByGroup(Nullable<int> groupId, MergeOption mergeOption)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserImpl>("GetUsersByGroup", mergeOption, groupIdParameter);
        }
    
        public virtual ObjectResult<UserImpl> GetUsersByNotification(string notificationName)
        {
            var notificationNameParameter = notificationName != null ?
                new ObjectParameter("NotificationName", notificationName) :
                new ObjectParameter("NotificationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserImpl>("GetUsersByNotification", notificationNameParameter);
        }
    
        public virtual ObjectResult<UserImpl> GetUsersByNotification(string notificationName, MergeOption mergeOption)
        {
            var notificationNameParameter = notificationName != null ?
                new ObjectParameter("NotificationName", notificationName) :
                new ObjectParameter("NotificationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserImpl>("GetUsersByNotification", mergeOption, notificationNameParameter);
        }
    
        public virtual ObjectResult<GroupImpl> GetGroupsByNotification(string notificationName)
        {
            var notificationNameParameter = notificationName != null ?
                new ObjectParameter("NotificationName", notificationName) :
                new ObjectParameter("NotificationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GroupImpl>("GetGroupsByNotification", notificationNameParameter);
        }
    
        public virtual ObjectResult<GroupImpl> GetGroupsByNotification(string notificationName, MergeOption mergeOption)
        {
            var notificationNameParameter = notificationName != null ?
                new ObjectParameter("NotificationName", notificationName) :
                new ObjectParameter("NotificationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GroupImpl>("GetGroupsByNotification", mergeOption, notificationNameParameter);
        }
    }
}
